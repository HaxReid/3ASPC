	    var userJson = JsonConvert.SerializeObject(new
            {
                Id = 1,
                Email = "user@user.com",
                Username = "user",
                Password = "user",
                Role = "User"
            });
            var adminJson = JsonConvert.SerializeObject(new
            {
                Id = 2,
                Email = "admin@admin.com",
                Username = "admin",
                Password = "admin",
                Role = "Admin"
            });
            var sellerJson = JsonConvert.SerializeObject(new
            {
                Id = 3,
                Email = "seller@seller.com",
                Username = "seller",
                Password = "seller",
                Role = "Seller"
            });

            await CreateUserAsync(userJson);
            await CreateUserAsync(adminJson);
            await CreateUserAsync(sellerJson);
            await LoginAndGetJwtAsync("user@user.com", "user");

            await GetUserAsync(1); 
            await GetAllUsersAsync();

            var newUserJson = JsonConvert.SerializeObject(new
            {
                Id = 1, 
                Email = "newuser@newuser.com",
                Username = "newuser",
                Password = "newuser",
                Role = "User"
            });
            await UpdateUserAsync(1, newUserJson); 
            await DeleteUserAsync(1); 

            var chaiseJson = JsonConvert.SerializeObject(new
            {
                Name = "Chaise",
                Image = "chaise.png",
                Price = 100,
                Type = "Meuble",
                Available = true,
                AddedTime = DateTime.Now,
                SellerId = 3
            });
            var tabletteJson = JsonConvert.SerializeObject(new
            {
                Name = "Tablette",
                Image = "tablette.png",
                Price = 400,
                Type = "Électronique",
                Available = false,
                AddedTime = DateTime.Now,
                SellerId = 3
            });

            await CreateProductAsync(chaiseJson);
            await CreateProductAsync(tabletteJson);

            await GetProductAsync(1); 

            var updatedChaiseJson = JsonConvert.SerializeObject(new
            {
                Name = "Chaise de bureau",
                Image = "chaise.png",
                Price = 150,
                Type = "Meuble",
                Available = true,
                AddedTime = DateTime.Now,
                SellerId = 3
            });
            await UpdateProductAsync(1, updatedChaiseJson); 
            await DeleteProductAsync(1); 

            await AddToCartAsync(1); 
            await GetCartAsync();
            await RemoveFromCartAsync(1);
 	
	static async Task LoginAndGetJwtAsync(string email, string password)
        {
            try
            {
                var loginRequest = new
                {
                    Email = email,
                    Password = password
                };

                var json = JsonConvert.SerializeObject(loginRequest);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await _httpClient.PostAsync($"{_baseUrl}/api/auth/login", content);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var tokenObject = JsonConvert.DeserializeAnonymousType(responseContent, new { Token = "" });
                    _jwtToken = tokenObject.Token;
                }
                else
                {
                    Console.WriteLine($"Échec de la connexion: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la connexion: {ex.Message}");
            }
        }

        static async Task CreateUserAsync(string userJson)
        {
            try
            {
                var content = new StringContent(userJson, Encoding.UTF8, "application/json");

                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.PostAsync($"{_baseUrl}/api/users", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Utilisateur créé avec succès.");
                }
                else
                {
                    Console.WriteLine($"Échec de la création de l'utilisateur : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la création de l'utilisateur : {ex.Message}");
            }
        }

        static async Task GetAllUsersAsync()
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.GetAsync($"{_baseUrl}/api/users");

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var users = JsonConvert.DeserializeObject<dynamic>(responseContent);

                    Console.WriteLine("Liste des utilisateurs :");
                    if (users != null)
                        foreach (var user in users)
                        {
                            Console.WriteLine(
                                $"ID: {user.Id}, Nom d'utilisateur: {user.Username}, Email: {user.Email}, Rôle: {user.Role}");
                        }
                }
                else
                {
                    Console.WriteLine($"Échec de la récupération des utilisateurs : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération des utilisateurs : {ex.Message}");
            }
        }

        static async Task GetUserAsync(int userId)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.GetAsync($"{_baseUrl}/api/users/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var user = JsonConvert.DeserializeObject<dynamic>(responseContent);
                    if (user != null) Console.WriteLine($"Utilisateur récupéré: {user.Username}");
                }
                else
                {
                    Console.WriteLine($"Échec de la récupération de l'utilisateur: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération de l'utilisateur: {ex.Message}");
            }
        }

        static async Task UpdateUserAsync(int userId, string updatedUserJson)
        {
            try
            {
                var content = new StringContent(updatedUserJson, Encoding.UTF8, "application/json");

                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");
                
                var response = await _httpClient.PutAsync($"{_baseUrl}/api/users/{userId}", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Utilisateur {userId} mis à jour avec succès.");
                }
                else
                {
                    Console.WriteLine($"Échec de la mise à jour de l'utilisateur {userId} : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la mise à jour de l'utilisateur {userId} : {ex.Message}");
            }
        }

        static async Task DeleteUserAsync(int userId)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.DeleteAsync($"{_baseUrl}/api/users/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Utilisateur {userId} supprimé avec succès.");
                }
                else
                {
                    Console.WriteLine($"Échec de la suppression de l'utilisateur {userId} : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la suppression de l'utilisateur {userId} : {ex.Message}");
            }
        }

        static async Task CreateProductAsync(string productJson)
        {
            try
            {
                var content = new StringContent(productJson, Encoding.UTF8, "application/json");

                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.PostAsync($"{_baseUrl}/api/products", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Produit créé avec succès.");
                }
                else
                {
                    Console.WriteLine($"Échec de la création du produit : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la création du produit : {ex.Message}");
            }
        }

        static async Task GetProductAsync(int productId)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.GetAsync($"{_baseUrl}/api/products/{productId}");

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var product = JsonConvert.DeserializeObject<dynamic>(responseContent);
                    if (product != null) Console.WriteLine($"Produit récupéré : {product.Name}");
                }
                else
                {
                    Console.WriteLine($"Échec de la récupération du produit : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération du produit : {ex.Message}");
            }
        }

        static async Task GetProductsAsync(string sortBy, int limit = 10)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                string apiUrl = $"{_baseUrl}/api/products?sortBy={sortBy}&limit={limit}";

                var response = await _httpClient.GetAsync(apiUrl);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var products = JsonConvert.DeserializeObject<dynamic>(responseContent);

                    Console.WriteLine("Liste des produits :");
                    if (products != null)
                        foreach (var product in products)
                        {
                            Console.WriteLine(
                                $"ID: {product.Id}, Nom: {product.Name}, Type: {product.Type}, Prix: {product.Price}");
                        }
                }
                else
                {
                    Console.WriteLine($"Échec de la récupération des produits : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération des produits : {ex.Message}");
            }
        }

        static async Task UpdateProductAsync(int productId, string updatedProductJson)
        {
            try
            {
                var content = new StringContent(updatedProductJson, Encoding.UTF8, "application/json");

                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.PutAsync($"{_baseUrl}/api/products/{productId}", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Produit {productId} mis à jour avec succès.");
                }
                else
                {
                    Console.WriteLine($"Échec de la mise à jour du produit {productId} : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la mise à jour du produit {productId} : {ex.Message}");
            }
        }

        static async Task DeleteProductAsync(int productId)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.DeleteAsync($"{_baseUrl}/api/products/{productId}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Produit {productId} supprimé avec succès.");
                }
                else
                {
                    Console.WriteLine($"Échec de la suppression du produit {productId} : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la suppression du produit {productId} : {ex.Message}");
            }
        }

        static async Task AddToCartAsync(int productId)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.PostAsync($"{_baseUrl}/api/cart/{productId}", null);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Produit {productId} ajouté au panier avec succès.");
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    Console.WriteLine($"Le produit {productId} est déjà dans le panier.");
                }
                else
                {
                    Console.WriteLine($"Échec de l'ajout du produit {productId} au panier : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'ajout du produit au panier : {ex.Message}");
            }
        }

        static async Task RemoveFromCartAsync(int productId)
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.DeleteAsync($"{_baseUrl}/api/cart/{productId}");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Produit {productId} supprimé du panier avec succès.");
                }
                else if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    Console.WriteLine($"Le produit {productId} n'est pas dans le panier.");
                }
                else
                {
                    Console.WriteLine($"Échec de la suppression du produit {productId} du panier : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la suppression du produit du panier : {ex.Message}");
            }
        }

        static async Task GetCartAsync()
        {
            try
            {
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_jwtToken}");

                var response = await _httpClient.GetAsync($"{_baseUrl}/api/cart");

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var cartItems = JsonConvert.DeserializeObject<dynamic>(responseContent);

                    Console.WriteLine("Contenu du panier :");
                    if (cartItems != null)
                        foreach (var cartItem in cartItems)
                        {
                            Console.WriteLine($"Produit ID: {cartItem.ProductId}");
                        }
                }
                else
                {
                    Console.WriteLine($"Échec de la récupération du contenu du panier : {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération du contenu du panier : {ex.Message}");
            }
        }
    }